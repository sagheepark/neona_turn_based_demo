{
  "character_id": "dr_python",
  "version": "2.0",
  "last_updated": "2025-01-18T10:00:00Z",
  "knowledge_items": [
    {
      "id": "py_001",
      "type": "text",
      "category": "fundamentals",
      "title": "Python 기본 문법 - 변수와 데이터 타입",
      "content": "Python에서는 변수를 선언할 때 타입을 명시하지 않아도 됩니다.\n\n# 기본 데이터 타입들\nname = \"김파이썬\"  # 문자열 (string)\nage = 34  # 정수 (integer)\nheight = 175.5  # 실수 (float)\nis_teacher = True  # 불린 (boolean)\n\n# 변수명 규칙:\n# - 영문자, 숫자, 밑줄(_) 사용 가능\n# - 숫자로 시작할 수 없음\n# - 대소문자 구분 (name과 Name은 다름)\n# - 예약어 사용 불가 (if, for, class 등)",
      "tags": [
        "변수",
        "데이터타입",
        "기초문법",
        "초급"
      ],
      "trigger_keywords": [
        "변수",
        "데이터타입",
        "문자열",
        "정수",
        "실수",
        "불린",
        "기본문법",
        "타입"
      ],
      "context_keywords": [
        "선언",
        "할당",
        "값",
        "저장"
      ],
      "priority": 1,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "beginner",
        "student"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "id": "py_002",
      "type": "text",
      "category": "fundamentals",
      "title": "리스트(List)와 딕셔너리(Dictionary) 활용",
      "content": "리스트와 딕셔너리는 Python에서 가장 많이 사용하는 데이터 구조입니다.\n\n# 리스트 - 순서가 있는 데이터 모음\nfruits = [\"사과\", \"바나나\", \"오렌지\"]\nfruits.append(\"포도\")  # 끝에 추가\nprint(fruits[0])  # 첫 번째 요소: \"사과\"\n\n# 딕셔너리 - 키-값 쌍으로 데이터 저장\nstudent = {\n    \"name\": \"홍길동\",\n    \"age\": 20,\n    \"major\": \"컴퓨터공학\"\n}\nprint(student[\"name\"])  # \"홍길동\"\nstudent[\"grade\"] = \"A+\"  # 새로운 키-값 추가\n\n# 실무 팁: 딕셔너리는 JSON 데이터와 호환이 좋아 웹 개발에서 자주 사용됩니다.",
      "tags": [
        "리스트",
        "딕셔너리",
        "데이터구조",
        "초급"
      ],
      "trigger_keywords": [
        "리스트",
        "딕셔너리",
        "배열",
        "list",
        "dict",
        "데이터구조",
        "인덱스",
        "키값"
      ],
      "context_keywords": [
        "저장",
        "관리",
        "구조",
        "순서"
      ],
      "priority": 1,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "beginner",
        "student"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "id": "py_003",
      "type": "text",
      "category": "control_flow",
      "title": "조건문(if-else)과 반복문(for, while)",
      "content": "프로그램의 흐름을 제어하는 조건문과 반복문은 프로그래밍의 핵심입니다.\n\n# 조건문 (if-else)\nscore = 85\nif score >= 90:\n    grade = \"A\"\nelif score >= 80:\n    grade = \"B\"\nelse:\n    grade = \"C\"\nprint(f\"성적: {grade}\")\n\n# for 반복문 - 정해진 횟수만큼 반복\nfor i in range(5):  # 0부터 4까지\n    print(f\"{i+1}번째 반복\")\n\n# while 반복문 - 조건이 참인 동안 반복\ncount = 0\nwhile count < 3:\n    print(f\"카운트: {count}\")\n    count += 1\n\n# 실무 팁: for문은 횟수가 정해져 있을 때, while문은 조건에 따라 반복할 때 사용합니다.",
      "tags": [
        "조건문",
        "반복문",
        "if",
        "for",
        "while",
        "제어구조"
      ],
      "trigger_keywords": [
        "조건문",
        "반복문",
        "if",
        "else",
        "for",
        "while",
        "반복",
        "조건",
        "제어"
      ],
      "context_keywords": [
        "흐름",
        "제어",
        "판단",
        "반복실행"
      ],
      "priority": 1,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "beginner",
        "student"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "id": "py_004",
      "type": "text",
      "category": "functions",
      "title": "함수 정의와 활용",
      "content": "함수는 코드의 재사용성을 높이고 프로그램을 체계적으로 구성하는 핵심 요소입니다.\n\n# 기본 함수 정의\ndef greet(name):\n    return f\"안녕하세요, {name}님!\"\n\n# 함수 호출\nmessage = greet(\"김파이썬\")\nprint(message)  # \"안녕하세요, 김파이썬님!\"\n\n# 매개변수 기본값 설정\ndef calculate_area(width, height=10):\n    return width * height\n\narea1 = calculate_area(5)     # height는 기본값 10 사용\narea2 = calculate_area(5, 8)  # height를 8로 지정\n\n# 여러 값 반환\ndef get_name_age():\n    return \"홍길동\", 25\n\nname, age = get_name_age()  # 언패킹\n\n# 실무 팁: 함수명은 동사로, 변수명은 명사로 짓는 것이 좋습니다.",
      "tags": [
        "함수",
        "function",
        "def",
        "return",
        "매개변수"
      ],
      "trigger_keywords": [
        "함수",
        "function",
        "def",
        "return",
        "매개변수",
        "파라미터",
        "인수",
        "호출"
      ],
      "context_keywords": [
        "정의",
        "선언",
        "재사용",
        "모듈화"
      ],
      "priority": 1,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "beginner",
        "intermediate"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "id": "py_005",
      "type": "text",
      "category": "error_handling",
      "title": "예외 처리 (try-except)",
      "content": "예외 처리는 프로그램의 안정성을 보장하는 중요한 기법입니다.\n\n# 기본 예외 처리\ntry:\n    number = int(input(\"숫자를 입력하세요: \"))\n    result = 10 / number\n    print(f\"결과: {result}\")\nexcept ValueError:\n    print(\"올바른 숫자를 입력해주세요.\")\nexcept ZeroDivisionError:\n    print(\"0으로 나눌 수 없습니다.\")\nexcept Exception as e:\n    print(f\"예상치 못한 오류가 발생했습니다: {e}\")\nfinally:\n    print(\"프로그램을 종료합니다.\")\n\n# 사용자 정의 예외\nclass CustomError(Exception):\n    pass\n\ndef validate_age(age):\n    if age < 0:\n        raise CustomError(\"나이는 0보다 작을 수 없습니다.\")\n    return age\n\n# 실무 팁: 예외 처리는 예상 가능한 오류에 대해서만 사용하고, 너무 넓은 범위로 잡지 않는 것이 좋습니다.",
      "tags": [
        "예외처리",
        "try",
        "except",
        "finally",
        "오류처리"
      ],
      "trigger_keywords": [
        "예외",
        "오류",
        "에러",
        "try",
        "except",
        "finally",
        "exception",
        "error"
      ],
      "context_keywords": [
        "처리",
        "방지",
        "안정성",
        "디버깅"
      ],
      "priority": 2,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "intermediate"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "id": "py_006",
      "type": "text",
      "category": "oop",
      "title": "클래스와 객체 지향 프로그래밍",
      "content": "객체 지향 프로그래밍은 코드의 재사용성과 유지보수성을 크게 향상시킵니다.\n\n# 기본 클래스 정의\nclass Student:\n    def __init__(self, name, age):\n        self.name = name  # 인스턴스 변수\n        self.age = age\n        self.grades = []\n    \n    def add_grade(self, grade):\n        self.grades.append(grade)\n    \n    def get_average(self):\n        if not self.grades:\n            return 0\n        return sum(self.grades) / len(self.grades)\n    \n    def __str__(self):\n        return f\"학생 {self.name} (나이: {self.age})\"\n\n# 객체 생성 및 사용\nstudent1 = Student(\"김철수\", 20)\nstudent1.add_grade(85)\nstudent1.add_grade(92)\nprint(student1.get_average())  # 88.5\n\n# 상속\nclass GraduateStudent(Student):\n    def __init__(self, name, age, thesis_topic):\n        super().__init__(name, age)\n        self.thesis_topic = thesis_topic\n    \n    def __str__(self):\n        return f\"대학원생 {self.name} - 논문주제: {self.thesis_topic}\"\n\n# 실무 팁: 클래스명은 PascalCase를, 메서드명은 snake_case를 사용합니다.",
      "tags": [
        "클래스",
        "객체",
        "OOP",
        "상속",
        "캡슐화"
      ],
      "trigger_keywords": [
        "클래스",
        "객체",
        "class",
        "object",
        "상속",
        "inheritance",
        "인스턴스",
        "메서드"
      ],
      "context_keywords": [
        "설계",
        "모델링",
        "추상화",
        "재사용"
      ],
      "priority": 2,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "intermediate",
        "advanced"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "id": "py_007",
      "type": "text",
      "category": "libraries",
      "title": "필수 라이브러리 활용 (requests, json, datetime)",
      "content": "Python의 강력함은 풍부한 라이브러리 생태계에 있습니다.\n\n# requests - HTTP 요청\nimport requests\n\nresponse = requests.get('https://api.github.com/users/octocat')\nif response.status_code == 200:\n    data = response.json()\n    print(f\"사용자명: {data['login']}\")\n\n# json - JSON 데이터 처리\nimport json\n\ndata = {'name': '김파이썬', 'age': 34}\njson_string = json.dumps(data, ensure_ascii=False)\nprint(json_string)  # '{\"name\": \"김파이썬\", \"age\": 34}'\n\nparsed_data = json.loads(json_string)\nprint(parsed_data['name'])  # '김파이썬'\n\n# datetime - 날짜와 시간\nfrom datetime import datetime, timedelta\n\nnow = datetime.now()\nprint(f\"현재 시각: {now.strftime('%Y-%m-%d %H:%M:%S')}\")\n\ntomorrow = now + timedelta(days=1)\nprint(f\"내일: {tomorrow.strftime('%Y-%m-%d')}\")\n\n# 실무 팁: pip install requests로 외부 라이브러리를 설치할 수 있습니다.",
      "tags": [
        "라이브러리",
        "requests",
        "json",
        "datetime",
        "API"
      ],
      "trigger_keywords": [
        "라이브러리",
        "requests",
        "json",
        "datetime",
        "API",
        "모듈",
        "import"
      ],
      "context_keywords": [
        "활용",
        "설치",
        "외부",
        "확장"
      ],
      "priority": 2,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "intermediate",
        "web_developer"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "id": "py_008",
      "type": "text",
      "category": "best_practices",
      "title": "PEP 8 코딩 스타일 가이드",
      "content": "PEP 8은 Python 코드 작성의 표준 스타일 가이드입니다.\n\n# 들여쓰기: 스페이스 4개\ndef calculate_total(items):\n    total = 0\n    for item in items:\n        total += item.price\n    return total\n\n# 변수명: snake_case\nuser_name = \"김파이썬\"\nmax_retry_count = 3\n\n# 클래스명: PascalCase\nclass UserAccount:\n    pass\n\n# 상수: UPPER_CASE\nMAX_CONNECTIONS = 100\nDEFAULT_TIMEOUT = 30\n\n# 라인 길이: 최대 79자\nvery_long_variable_name = (\n    \"이렇게 긴 문자열은 \"\n    \"여러 줄로 나누어 작성합니다.\"\n)\n\n# 함수/클래스 사이: 2줄 공백\nclass FirstClass:\n    pass\n\n\nclass SecondClass:\n    pass\n\n# import 순서: 표준 라이브러리 → 서드파티 → 로컬\nimport os\nimport sys\n\nimport requests\nimport numpy\n\nfrom myapp import models\n\n# 실무 팁: VS Code나 PyCharm 같은 IDE에서 자동 포매팅을 설정하면 편리합니다.",
      "tags": [
        "PEP8",
        "코딩스타일",
        "컨벤션",
        "가이드라인"
      ],
      "trigger_keywords": [
        "PEP8",
        "스타일",
        "가이드",
        "컨벤션",
        "들여쓰기",
        "네이밍",
        "코딩규칙"
      ],
      "context_keywords": [
        "표준",
        "규칙",
        "스타일",
        "포맷"
      ],
      "priority": 2,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "intermediate",
        "professional"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "id": "py_009",
      "type": "procedure",
      "category": "debugging",
      "title": "효과적인 디버깅 방법",
      "content": "디버깅은 프로그래머의 필수 스킬입니다. 체계적인 접근이 중요합니다.\n\n## 1단계: 문제 파악\n- 어떤 오류가 발생하는가?\n- 언제 발생하는가?\n- 어떤 입력에서 발생하는가?\n\n## 2단계: print() 디버깅\n```python\ndef calculate_average(numbers):\n    print(f\"입력 받은 숫자들: {numbers}\")  # 입력값 확인\n    total = sum(numbers)\n    print(f\"합계: {total}\")  # 중간 계산 확인\n    count = len(numbers)\n    print(f\"개수: {count}\")  # 개수 확인\n    average = total / count\n    print(f\"평균: {average}\")  # 최종 결과 확인\n    return average\n```\n\n## 3단계: 파이썬 디버거 사용\n```python\nimport pdb\n\ndef problematic_function():\n    pdb.set_trace()  # 여기서 실행이 멈춤\n    # 단계별로 실행하며 변수 상태 확인 가능\n    result = complex_calculation()\n    return result\n```\n\n## 4단계: 로깅 활용\n```python\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\ndef process_data(data):\n    logger.debug(f\"데이터 처리 시작: {data}\")\n    try:\n        result = data * 2\n        logger.info(f\"처리 완료: {result}\")\n        return result\n    except Exception as e:\n        logger.error(f\"오류 발생: {e}\")\n        raise\n```\n\n## 실무 팁\n- 에러 메시지를 자세히 읽기\n- 가장 간단한 경우부터 테스트\n- 한 번에 하나씩 변경하며 테스트\n- Stack Overflow나 공식 문서 참고",
      "tags": [
        "디버깅",
        "오류해결",
        "문제해결",
        "pdb",
        "logging"
      ],
      "trigger_keywords": [
        "디버깅",
        "오류",
        "에러",
        "버그",
        "문제해결",
        "디버거",
        "로깅"
      ],
      "context_keywords": [
        "해결",
        "수정",
        "찾기",
        "추적"
      ],
      "priority": 2,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "intermediate",
        "troubleshooter"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "id": "py_010",
      "type": "reference",
      "category": "projects",
      "title": "초보자를 위한 실습 프로젝트 아이디어",
      "content": "실제 프로젝트를 통해 학습하는 것이 가장 효과적입니다.\n\n## 레벨 1: 기초 프로젝트\n1. **계산기 만들기**\n   - 기본 사칙연산 구현\n   - 사용자 입력 처리\n   - 예외 처리 추가\n\n2. **숫자 맞추기 게임**\n   - random 모듈 사용\n   - 반복문과 조건문 연습\n   - 사용자 피드백 제공\n\n3. **할 일 목록 관리**\n   - 리스트를 이용한 데이터 관리\n   - 추가, 삭제, 수정 기능\n   - 파일에 저장/불러오기\n\n## 레벨 2: 중급 프로젝트\n1. **웹 스크래핑**\n   - requests와 BeautifulSoup 사용\n   - 뉴스 제목 수집\n   - CSV 파일로 저장\n\n2. **날씨 정보 앱**\n   - API 사용법 학습\n   - JSON 데이터 처리\n   - 사용자 친화적 출력\n\n3. **간단한 웹사이트**\n   - Flask 프레임워크 사용\n   - HTML 템플릿 연동\n   - 데이터베이스 연결\n\n## 레벨 3: 고급 프로젝트\n1. **데이터 분석 도구**\n   - pandas와 matplotlib 사용\n   - CSV 데이터 분석\n   - 시각화 생성\n\n2. **챗봇 만들기**\n   - 자연어 처리 기초\n   - 규칙 기반 응답 시스템\n   - GUI 인터페이스 추가\n\n## 학습 팁\n- 작은 기능부터 시작해서 점진적으로 확장\n- 코드를 GitHub에 올려서 포트폴리오 구성\n- 다른 사람의 코드를 참고하되 직접 타이핑해보기\n- 에러를 두려워하지 말고 적극적으로 실험하기",
      "tags": [
        "프로젝트",
        "실습",
        "연습",
        "포트폴리오",
        "아이디어"
      ],
      "trigger_keywords": [
        "프로젝트",
        "실습",
        "연습",
        "만들기",
        "개발",
        "포트폴리오",
        "아이디어"
      ],
      "context_keywords": [
        "실전",
        "응용",
        "구현",
        "제작"
      ],
      "priority": 1,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "beginner",
        "student",
        "self_learner"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "id": "py_011",
      "type": "text",
      "category": "advanced",
      "title": "리스트 컴프리헨션과 제너레이터",
      "content": "Python의 고급 기능들은 코드를 더 간결하고 효율적으로 만들어줍니다.\n\n# 리스트 컴프리헨션 - 간결한 리스트 생성\n# 기존 방식\nnumbers = []\nfor i in range(10):\n    if i % 2 == 0:\n        numbers.append(i ** 2)\n\n# 리스트 컴프리헨션\nnumbers = [i**2 for i in range(10) if i % 2 == 0]\nprint(numbers)  # [0, 4, 16, 36, 64]\n\n# 딕셔너리 컴프리헨션\nword_lengths = {word: len(word) for word in ['python', 'java', 'javascript']}\nprint(word_lengths)  # {'python': 6, 'java': 4, 'javascript': 10}\n\n# 제너레이터 - 메모리 효율적인 반복\ndef fibonacci_generator(n):\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        yield a  # yield는 값을 반환하지만 함수 상태를 유지\n        a, b = b, a + b\n        count += 1\n\n# 제너레이터 사용\nfib_gen = fibonacci_generator(10)\nfor num in fib_gen:\n    print(num, end=' ')  # 0 1 1 2 3 5 8 13 21 34\n\n# 제너레이터 표현식\nsquares_gen = (x**2 for x in range(1000000))  # 메모리를 적게 사용\n\n# 실무 팁: 큰 데이터를 다룰 때는 제너레이터를 사용하면 메모리를 절약할 수 있습니다.",
      "tags": [
        "리스트컴프리헨션",
        "제너레이터",
        "yield",
        "고급문법"
      ],
      "trigger_keywords": [
        "컴프리헨션",
        "제너레이터",
        "yield",
        "고급",
        "효율",
        "메모리"
      ],
      "context_keywords": [
        "최적화",
        "성능",
        "간결",
        "고급기능"
      ],
      "priority": 3,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "advanced",
        "performance_focused"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "id": "py_012",
      "type": "text",
      "category": "web_development",
      "title": "Flask로 간단한 웹 애플리케이션 만들기",
      "content": "Flask는 Python의 가벼운 웹 프레임워크로 웹 개발을 쉽게 시작할 수 있습니다.\n\n# Flask 설치: pip install flask\n\nfrom flask import Flask, render_template, request, jsonify\n\napp = Flask(__name__)\n\n# 기본 라우트\n@app.route('/')\ndef home():\n    return '<h1>안녕하세요! Flask 웹사이트입니다.</h1>'\n\n# 동적 라우트\n@app.route('/user/<name>')\ndef user_profile(name):\n    return f'<h1>사용자: {name}</h1>'\n\n# POST 요청 처리\n@app.route('/api/calculate', methods=['POST'])\ndef calculate():\n    data = request.get_json()\n    num1 = data.get('num1', 0)\n    num2 = data.get('num2', 0)\n    operation = data.get('operation', 'add')\n    \n    if operation == 'add':\n        result = num1 + num2\n    elif operation == 'multiply':\n        result = num1 * num2\n    else:\n        result = 0\n    \n    return jsonify({\n        'result': result,\n        'operation': operation\n    })\n\n# HTML 템플릿 사용\n@app.route('/calculator')\ndef calculator():\n    return render_template('calculator.html')\n\n# 애플리케이션 실행\nif __name__ == '__main__':\n    app.run(debug=True, port=5000)\n\n# templates/calculator.html 파일 예시:\n'''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Python 계산기</title>\n</head>\n<body>\n    <h1>웹 계산기</h1>\n    <form>\n        <input type=\"number\" id=\"num1\" placeholder=\"첫 번째 숫자\">\n        <input type=\"number\" id=\"num2\" placeholder=\"두 번째 숫자\">\n        <button type=\"button\" onclick=\"calculate()\">계산하기</button>\n    </form>\n    <div id=\"result\"></div>\n</body>\n</html>\n'''\n\n# 실무 팁: Flask는 학습용으로 좋고, 실제 서비스는 Django나 FastAPI를 고려해보세요.",
      "tags": [
        "Flask",
        "웹개발",
        "라우트",
        "API",
        "템플릿"
      ],
      "trigger_keywords": [
        "Flask",
        "웹",
        "서버",
        "API",
        "라우트",
        "템플릿",
        "웹개발"
      ],
      "context_keywords": [
        "개발",
        "서비스",
        "백엔드",
        "프론트엔드"
      ],
      "priority": 3,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "web_developer",
        "full_stack"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "id": "py_013",
      "type": "reference",
      "category": "career",
      "title": "Python 개발자 취업 로드맵",
      "content": "Python 개발자로 취업하기 위한 체계적인 학습 경로를 제시합니다.\n\n## 1단계: 기초 다지기 (1-2개월)\n- Python 기본 문법 완전 숙달\n- 데이터 구조 (리스트, 딕셔너리, 튜플, 셋)\n- 제어문 (조건문, 반복문)\n- 함수와 모듈\n- 예외 처리\n- 파일 입출력\n\n## 2단계: 중급 기술 (2-3개월)\n- 객체 지향 프로그래밍\n- 정규 표현식\n- 라이브러리 활용 (requests, json, datetime)\n- 데이터베이스 기초 (SQLite, MySQL)\n- Git과 GitHub 사용법\n- 가상환경과 패키지 관리\n\n## 3단계: 전문 분야 선택 (3-4개월)\n\n### 웹 개발 분야\n- **프레임워크**: Django 또는 Flask\n- **프론트엔드**: HTML, CSS, JavaScript 기초\n- **데이터베이스**: PostgreSQL, Redis\n- **API**: REST API 설계 및 구현\n- **배포**: AWS, Heroku, Docker\n\n### 데이터 분야\n- **라이브러리**: pandas, NumPy, matplotlib\n- **데이터베이스**: SQL 고급, MongoDB\n- **시각화**: Seaborn, Plotly\n- **머신러닝**: scikit-learn 기초\n- **클라우드**: AWS S3, BigQuery\n\n### 자동화/DevOps 분야\n- **스크립팅**: 시스템 자동화\n- **도구**: Selenium, Beautiful Soup\n- **인프라**: Docker, Kubernetes\n- **모니터링**: Prometheus, Grafana\n- **CI/CD**: Jenkins, GitHub Actions\n\n## 4단계: 포트폴리오 구성 (1-2개월)\n\n### 필수 프로젝트\n1. **개인 웹사이트/블로그**\n   - Django/Flask 사용\n   - 데이터베이스 연동\n   - 사용자 인증 기능\n\n2. **데이터 분석 프로젝트**\n   - 공개 데이터셋 활용\n   - 시각화 및 인사이트 도출\n   - Jupyter Notebook 정리\n\n3. **API 서비스**\n   - RESTful API 설계\n   - 문서화 (Swagger/OpenAPI)\n   - 테스트 코드 작성\n\n### GitHub 관리\n- 코드 품질 유지 (PEP 8 준수)\n- README 파일 상세 작성\n- 커밋 메시지 규칙 준수\n- 지속적인 활동 (잔디 심기)\n\n## 5단계: 취업 준비 (1개월)\n\n### 기술 면접 준비\n- 알고리즘 문제 해결 (LeetCode, 프로그래머스)\n- 시간 복잡도, 공간 복잡도 이해\n- 데이터베이스 설계 및 최적화\n- 시스템 설계 기초\n\n### 이력서 작성\n- 기술 스택 명확히 기재\n- 프로젝트 성과 정량적으로 표현\n- 문제 해결 과정 구체적 서술\n- GitHub 링크 및 포트폴리오 첨부\n\n## 추천 학습 자료\n- **온라인 강의**: 패스트캠퍼스, 인프런, Coursera\n- **책**: \"파이썬 코딩의 기술\", \"Effective Python\"\n- **커뮤니티**: 파이썬 코리아, Stack Overflow\n- **실습**: 백준, 프로그래머스, 코드업\n\n## 실무 팁\n- 매일 꾸준히 코딩하기 (최소 1시간)\n- 오픈소스 프로젝트 기여하기\n- 기술 블로그 운영하기\n- 개발자 커뮤니티 활동하기\n- 최신 기술 트렌드 팔로우하기",
      "tags": [
        "취업",
        "로드맵",
        "커리어",
        "학습경로",
        "포트폴리오"
      ],
      "trigger_keywords": [
        "취업",
        "로드맵",
        "커리어",
        "개발자",
        "포트폴리오",
        "면접",
        "이력서"
      ],
      "context_keywords": [
        "준비",
        "계획",
        "목표",
        "성장"
      ],
      "priority": 2,
      "usage_count": 0,
      "relevance_score": 0.0,
      "persona_affinity": [
        "job_seeker",
        "student",
        "career_changer"
      ],
      "created_at": "2025-01-18T10:00:00Z",
      "last_used": null
    },
    {
      "title": "Python Functions",
      "content": "Functions are reusable blocks of code",
      "keywords": [
        "functions",
        "def",
        "return",
        "parameters"
      ],
      "category": "fundamentals",
      "id": "kb_ddd24a58",
      "created_at": "2025-08-19T11:11:01.617657"
    },
    {
      "title": "Python Functions",
      "content": "Functions are reusable blocks of code",
      "keywords": [
        "functions",
        "def",
        "return",
        "parameters"
      ],
      "category": "fundamentals",
      "id": "kb_b71ab853",
      "created_at": "2025-08-19T11:13:44.512192"
    },
    {
      "title": "Python Variables and Data Types",
      "content": "Variables in Python store data values. You can create variables by assigning values.",
      "keywords": [
        "variables",
        "vars",
        "data",
        "types",
        "assignment"
      ],
      "category": "fundamentals",
      "id": "kb_0390da25",
      "created_at": "2025-08-19T11:14:28.790877"
    },
    {
      "title": "Python Functions",
      "content": "Functions are reusable blocks of code",
      "keywords": [
        "functions",
        "def",
        "return",
        "parameters"
      ],
      "category": "fundamentals",
      "id": "kb_2f15a672",
      "created_at": "2025-08-19T11:14:46.132512"
    },
    {
      "title": "Python Functions",
      "content": "Functions are reusable blocks of code",
      "keywords": [
        "functions",
        "def",
        "return",
        "parameters"
      ],
      "category": "fundamentals",
      "id": "kb_736bcaed",
      "created_at": "2025-08-19T12:15:40.891770"
    },
    {
      "title": "Python Functions",
      "content": "Functions are reusable blocks of code",
      "keywords": [
        "functions",
        "def",
        "return",
        "parameters"
      ],
      "category": "fundamentals",
      "id": "kb_21907ae9",
      "created_at": "2025-08-19T16:45:19.260062"
    },
    {
      "title": "Python Functions",
      "content": "Functions are reusable blocks of code",
      "keywords": [
        "functions",
        "def",
        "return",
        "parameters"
      ],
      "category": "fundamentals",
      "id": "kb_095b3959",
      "created_at": "2025-08-27T20:22:11.895149"
    }
  ],
  "knowledge_stats": {
    "total_items": 13,
    "categories": {
      "fundamentals": 4,
      "control_flow": 1,
      "functions": 1,
      "error_handling": 1,
      "oop": 1,
      "libraries": 1,
      "best_practices": 1,
      "debugging": 1,
      "projects": 1,
      "advanced": 1,
      "web_development": 1,
      "career": 1
    },
    "avg_usage": 0.0,
    "last_updated": "2025-01-18T10:00:00Z"
  }
}